import argparse
import os
import re
import sys


def _write_output(filename, content):
  if os.path.exists(filename):
    with open(filename, 'rt') as strm:
      orig_content = strm.read()

    if orig_content == content:
      return False

  dirpath = os.path.dirname(filename)
  if not os.path.isdir(dirpath):
    os.makedirs(dirpath)

  with open(filename, 'wt') as strm:
    strm.write(content)
    strm.flush()

  return True


def _main():
  parser = argparse.ArgumentParser()

  parser.add_argument(
      '--template-script-filepaths', dest='template_script_filepaths', required=True, type=str, nargs='+',
      help='Path to the template scripts, either absolute or relative to current working directory.')

  parser.add_argument(
      '--output-dirpath', dest='output_dirpath', required=True, type=str,
      help='Output directory path, either absolute or relative to the current working directory.')

  args = parser.parse_args()

  if not os.path.isabs(args.output_dirpath):
    args.output_dirpath = os.path.abspath(args.output_dirpath)

  content = [
    '// This file is automatically generated by scripts/embed_python_api.py DO NOT EDIT!!!',
    '',
    '/*',
    ' Copyright 2019 Alain Dargelas',
    ' Licensed under the Apache License, Version 2.0 (the "License");',
    ' you may not use this file except in compliance with the License.',
    ' You may obtain a copy of the License at',
    '',
    '  http://www.apache.org/licenses/LICENSE-2.0',
    '',
    ' Unless required by applicable law or agreed to in writing, software',
    ' distributed under the License is distributed on an "AS IS" BASIS,',
    ' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.',
    ' See the License for the specific language governing permissions and',
    ' limitations under the License.',
    ' */',
    '',
    '#ifndef SURELOG_SLAPI_SCRIPTS_H',
    '#define SURELOG_SLAPI_SCRIPTS_H',
    '#pragma once',
    '',
    '#include <string>',
    '#include <vector>',
    '',
    'const std::vector<std::string_view> slapi_scripts = {',
    '  "import slapi\\n",',
    '  "\\n",'
  ]

  for filepath in args.template_script_filepaths:
    if not os.path.isabs(filepath):
      filepath = os.path.abspath(filepath)

    with open(filepath, 'rt') as instrm:
      found_first = False
      for line in instrm:
        if not found_first and line.startswith('def SL'):
          found_first = True

        if found_first:
          line = line.rstrip()
          line = line.replace('_slapi', 'slapi')
          line = line.replace('"', '\\"')
          line = line.replace('\\n', '\\\\n')
          content.append(f'  "{line}\\n",')

  content.extend([
    '};',
    '',
    '#endif  /* SURELOG_SLAPI_SCRIPTS_H */',
    ''
  ])

  _write_output(os.path.join(args.output_dirpath, 'slapi_scripts.h'), '\n'.join(content))

  return 0


if __name__ == '__main__':
  sys.exit(_main())
