/*
  Do not modify, auto-generated by model_gen.tcl

  Copyright 2019 Alain Dargelas

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

/*
 * File:   SymbolFactory.cpp
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */
#include <uhdm/SymbolFactory.h>

namespace UHDM {
const std::string& SymbolFactory::getBadSymbol() {
  static const std::string kBadSymbol = "@@BAD_SYMBOL@@";
  return kBadSymbol;
}

SymbolFactory::ID SymbolFactory::Make(std::string_view symbol) {
  const auto found = symbol2IdMap_.find(symbol);
  if (found != symbol2IdMap_.end()) return found->second;
  id2SymbolMap_.emplace_back(symbol);
  std::string_view stable_view = id2SymbolMap_.back();
  const auto inserted = symbol2IdMap_.insert({stable_view, idCounter_++});
  return inserted.first->second;
}

const std::string& SymbolFactory::GetSymbol(ID id) const {
  return (id < id2SymbolMap_.size()) ? id2SymbolMap_[id] : getBadSymbol();
}

SymbolFactory::ID SymbolFactory::GetId(std::string_view symbol) const {
  auto found = symbol2IdMap_.find(symbol);
  return (found == symbol2IdMap_.end()) ? kBadId : found->second;
}

void SymbolFactory::Purge() {
  Symbol2IdMap().swap(symbol2IdMap_);
  Id2SymbolMap().swap(id2SymbolMap_);
  idCounter_ = 0;
}

}  // namespace UHDM
