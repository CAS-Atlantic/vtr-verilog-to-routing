---
# readability-make-member-function-const is great, but it also suggests that
#    in cases where we return a non-const pointer.
#    So good for a regular cleanup-sweep but not as default.
# Some of the rules below that are disabled should be re-considered once we
# have a somewhat clean baseline (runtime-int, readability-casting,
# narrowing conversion come to mind)
# In particular the disabled clang-analyzer-* messages should all be
# enabled as they uncover real bugs, but once we have the other noise reduced.
# performance-inefficient-string-concatenation is good, but until we use
# absl in this project with absl::StrCat(), the alternatives are not improving
# readability.
Checks: >
  clang-diagnostic-*,clang-analyzer-*,
  -clang-analyzer-core.CallAndMessage,
  -clang-analyzer-core.NullDereference,
  -clang-analyzer-cplusplus.NewDeleteLeaks,
  readability-*,
  -readability-braces-around-statements,
  -readability-convert-member-functions-to-static,
  -readability-else-after-return,
  -readability-function-cognitive-complexity,
  -readability-implicit-bool-conversion,
  -readability-inconsistent-declaration-parameter-name,
  -readability-isolate-declaration,
  -readability-magic-numbers,
  -readability-make-member-function-const,
  -readability-named-parameter,
  -readability-qualified-auto,
  -readability-redundant-access-specifiers,
  -readability-simplify-boolean-expr,
  -readability-uppercase-literal-suffix,
  google-*,
  -google-build-using-namespace,
  -google-readability-avoid-underscore-in-googletest-name,
  -google-readability-braces-around-statements,
  -google-readability-casting,
  -google-readability-todo,
  -google-runtime-int,
  performance-*,
  -performance-inefficient-string-concatenation,
  bugprone-*,
  -bugprone-narrowing-conversions,
  -bugprone-branch-clone,
  modernize-loop-convert,
  modernize-raw-string-literal,
  modernize-use-override,

WarningsAsErrors: ''
HeaderFilterRegex: ''
AnalyzeTemporaryDtors: false
...
